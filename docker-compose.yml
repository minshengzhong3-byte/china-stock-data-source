# China Stock Data Source - Docker Compose 配置
# 提供一键启动的完整开发和生产环境

version: '3.8'

services:
  # 主数据服务
  stock-data-service:
    build: .
    container_name: china-stock-data
    ports:
      - "8000:8000"  # API服务端口
      - "8888:8888"  # Jupyter端口
    volumes:
      - ./data:/app/data          # 数据持久化
      - ./logs:/app/logs          # 日志持久化
      - ./cache:/app/cache        # 缓存持久化
      - ./examples:/app/examples  # 示例代码热更新
    environment:
      - PYTHONPATH=/app/src
      - TZ=Asia/Shanghai
      - DATA_CACHE_DIR=/app/cache
      - LOG_LEVEL=INFO
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "from src.unified_data_source import get_realtime_price; print('OK' if get_realtime_price('000001') else 'FAIL')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - stock-network

  # Redis缓存服务（可选）
  redis-cache:
    image: redis:7-alpine
    container_name: stock-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - stock-network

  # Nginx反向代理（生产环境）
  nginx-proxy:
    image: nginx:alpine
    container_name: stock-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - stock-data-service
    restart: unless-stopped
    networks:
      - stock-network
    profiles:
      - production

volumes:
  redis-data:
    driver: local

networks:
  stock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 预定义的启动配置
# 开发模式: docker-compose up stock-data-service
# 生产模式: docker-compose --profile production up
# API模式: docker-compose run --rm stock-data-service /app/start.sh api
# Jupyter模式: docker-compose run --rm -p 8888:8888 stock-data-service /app/start.sh jupyter